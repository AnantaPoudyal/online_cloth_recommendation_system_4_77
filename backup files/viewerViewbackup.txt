import os
import django
import pandas as pd
from django.shortcuts import get_object_or_404, redirect, render
from django.core.paginator import Paginator
from django.contrib import messages
from django.contrib.auth import authenticate, login
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

from viewer.forms import searchForm, viewerRegistrationForm
from viewer.models import create_user
from manageProducts.models import BaseColour,MasterCategory, Products,SubCategory,Season,ArticleType,Gender


# Set the base directory of your project
# D:\
BASE_DIR = "D:\\bca\\6th sem files\\project ii\\online_cloth_recommendation_system_4_77"
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'online_cloth_recommendation_system_4_77.settings')

# Setup Django
django.setup()

# Paths and filenames
IMAGE_FOLDER_PATH = os.path.join(BASE_DIR, "static", "images")
STYLES_CSV_PATH = os.path.join(BASE_DIR, "static", "styles.csv")


# ========================= Helper Functions ========================= #
def load_data_from_db():
    """Load data from the database (Currently uses CSV)."""
    return pd.read_csav(STYLES_CSV_PATH)

def load_data(styles_csv_path, image_folder_path):
    df1 = load_data_from_db()
    image_files = os.listdir(image_folder_path)
    image_files.sort()
    image_ids = [int(filename.split(".")[0]) for filename in image_files]
    df_filenames = pd.DataFrame({"filename": image_files, "id": image_ids})
    return df1, df_filenames

def merge_and_clean_data(df1, df_filenames):
    """Merge datasets, clean the data, and filter for clothing-related items."""
    clothing_subcategories = ['Topwear', 'Bottomwear', 'Innerwear', 'Dress', 'Apparel Set', 'Loungewear and Nightwear', 
                              'Saree', 'Kurtas', 'Kurta Sets', 'Jumpsuit', 'Leggings', 'Trousers', 'Sweaters', 'Sweatshirts', 
                              'Tunics', 'Nightdress', 'Shirts', 'Jeans', 'Tshirts', 'Track Pants', 'Shorts', 'Skirts', 
                              'Capris', 'Camisoles', 'Blazers', 'Vest', 'Salwar', 'Churidar']

    merged_data = pd.merge(df1, df_filenames, on="id", how="inner")
    cleaned_data = merged_data.dropna(subset=["baseColour", "season", "usage", "productDisplayName", "filename"])
    refined_data = cleaned_data.drop(columns=["Extra1", "Extra2"], errors='ignore')

    return refined_data[(refined_data['masterCategory'] == 'Apparel') & (refined_data['subCategory'].isin(clothing_subcategories))]

def create_universal_tag(refined_data):
    universal_tag = refined_data[["gender", "masterCategory", "subCategory", "articleType", "baseColour", "season", "year", "usage", "productDisplayName"]]
    universal_tag["year"] = universal_tag["year"].astype(str)
    universal_tag["allCategory"] = universal_tag.apply(lambda row: ' '.join(row.values.astype(str)), axis=1)
    return universal_tag[["allCategory"]]

def prepare_dataset(refined_data, universal_tag):
    new_refined_data = refined_data[["id", "productDisplayName", "filename"]]
    new_refined_data["allCategory"] = universal_tag["allCategory"]
    return new_refined_data

def find_similar_items(keyword, dataset, vectorizer, similarity_matrix):
    keyword_vector = vectorizer.transform([keyword]).toarray()
    keyword_similarity = cosine_similarity(keyword_vector, similarity_matrix).flatten()
    similar_indices = keyword_similarity.argsort()[::-1][:70]
    similar_items = dataset.iloc[similar_indices].copy()
    similar_items['similarity'] = keyword_similarity[similar_indices]
    return similar_items[:15]

def find_similar_items_viewerItem(keyword, dataset, vectorizer, similarity_matrix,nth):
    keyword_vector = vectorizer.transform([keyword]).toarray()
    keyword_similarity = cosine_similarity(keyword_vector, similarity_matrix).flatten()
    similar_indices = keyword_similarity.argsort()[::-1][:70]
    similar_items = dataset.iloc[similar_indices].copy()
    similar_items['similarity'] = keyword_similarity[similar_indices]
    return similar_items[:nth]

def sideBar():
    sub_categories = SubCategory.objects.all()
    article_types = ArticleType.objects.all()
    base_colours = BaseColour.objects.all()
    seasons = Season.objects.all()
    genders = Gender.objects.all()
    sideBarContext = {
        'sub_categories': sub_categories,
        'article_types': article_types,
        'base_colours': base_colours,
        'seasons': seasons,
        'genders': genders,
    } 
    return sideBarContext
# View for the homepage
def homepage(request):
    # Call the slider_view function to get the images
    images = get_slider_images(5)  # Extract images from slider_view response
    items = get_items(5,"")
    sideBarData = sideBar()

    return render(request, 'viewerHomepage.html', {'images': images,'items': items,"searchForm":searchForm(),'sideBar':sideBarData})
def get_homepage_item():
    items = get_items(10, "")
    return items

# View for displaying items
def items(request):
    # Call the get_items function to get the items
    items = get_items(100, "")
    sideData = sideBar()
    page_number = request.GET.get('page', 1)
    paginator = Paginator(items, 25)  # Show 5 items per page
    paginated_items = paginator.get_page(page_number)
    
    context = {
        "items": paginated_items,
      
    }
    # Render the template with the content
    return render(request, "viewerItempage.html", {"content": context,  "searchForm":searchForm(),"sideBar":sideData})


def searched_items(request):
    sideData = sideBar()
    # Check if the form was submitted via GET
    if request.method == 'GET':
        form = searchForm(request.GET)
        if form.is_valid():
            # Get the search keyword from the form
            searched_keyword = form.cleaned_data.get('search')
            # Call the get_items function to get the filtered items
            items = get_items(25, searched_keyword)
            context = {
                "items": items,
                "searchForm": searchForm(),
            }
            # Render the template with the filtered items
            return render(request, "viewerItempage.html", {"content": context, "searchForm": searchForm(),"sideBar":sideData})
    # If no search keyword, show all items
    return redirect('items')


def getKeyword(request):
    return request.GET.get("search")

def itemDetails(request,item_id):
    # Call the get_items function to get the items
    df1, df_filenames = load_data(STYLES_CSV_PATH, IMAGE_FOLDER_PATH)
    refined_data = merge_and_clean_data(df1, df_filenames)

    item = refined_data.loc[refined_data["id"] == item_id].iloc[0]
    individualItemsTag = create_universal_tag(pd.DataFrame([item])).iloc[0]

    universal_tag = create_universal_tag(refined_data)
    new_refined_data = prepare_dataset(refined_data, universal_tag)

    cv = CountVectorizer(max_features=5000, stop_words="english")
    vector = cv.fit_transform(new_refined_data["allCategory"])

    item_allCategory = individualItemsTag["allCategory"]
    similar_items = find_similar_items(item_allCategory, new_refined_data, cv, vector)
    sideData = sideBar()
    context = {"item": item.to_dict(), "individualItemsTag": item_allCategory,"searchForm":searchForm(), "similar_items": similar_items.to_dict(orient="records")}

    # Render the template with the content
    return render(request, "viewerItemDetails.html", {"content": context,  "searchForm":searchForm(),"sideBar":sideData})



CATEGORY_SIZE=50
def products_by_subcategory(request, sub_category_name):
    subcategory = get_object_or_404(SubCategory, sub_category_name=sub_category_name)
    products = Products.objects.filter(subCategory=subcategory)[:CATEGORY_SIZE]
    sideData = sideBar()
    print(products)
    content = {'products': products, 'sideBar': sideData}
    return render(request, 'product_list.html', {'content': content,"sideBar":sideData})

def products_by_article_type(request, articleType_name):
    article_type = get_object_or_404(ArticleType, articleType_name=articleType_name)
    products = Products.objects.filter(articleType=article_type)[:CATEGORY_SIZE]
    sideData = sideBar()
    content = {'products': products, 'sideBar': sideData}
    return render(request, 'product_list.html', {'content': content,"sideBar":sideData})

def products_by_base_colour(request, baseColour_name):
    base_colour = get_object_or_404(BaseColour, baseColour_name=baseColour_name)
    products = Products.objects.filter(baseColour=base_colour)[:CATEGORY_SIZE]
    sideData = sideBar()
    content = {'products': products, 'sideBar': sideData}
    return render(request, 'product_list.html', {'content': content,"sideBar":sideData})

def products_by_season(request, season_name):
    season = get_object_or_404(Season, season_name=season_name)
    products = Products.objects.filter(season=season)[:CATEGORY_SIZE]
    sideData = sideBar()
    content = {'products': products, 'sideBar': sideData}
    return render(request, 'product_list.html', {'content': content,"sideBar":sideData})

def products_by_gender(request, gender_name):
    gender = get_object_or_404(Gender, gender_name=gender_name)
    products = Products.objects.filter(gender=gender)[:CATEGORY_SIZE]
    sideData = sideBar()
    content = {'products': products, 'sideBar': sideData}
    return render(request, 'product_list.html', {'content': content,"sideBar":sideData})

# View for login page
# views.py

from django.shortcuts import render, redirect
from django.contrib import messages
from .models import create_user
from .forms import LoginForm, PasswordResetForm
from django.contrib.auth.hashers import make_password

def custom_404_view(request, exception):
    return render(request, 'viewer404error.html', status=404)

# def login(request):
#     sideData = sideBar()
#     if request.method == 'POST':
#         form = LoginForm(request.POST)
#         if form.is_valid():
#             username = form.cleaned_data['usernames']
#             password = form.cleaned_data['password']
#             encrypt_pwd = make_password(password)
#             try:
#                 user = create_user.objects.get(usernames=username, password=encrypt_pwd)
#                 # Optionally, set session or other login actions
#                 request.session['user_id'] = user.id  # Example session setting
#                 request.session['logged_in'] = True
#                 request.session['username'] = username
#                 messages.success(request, 'Login successful')
#                 return redirect('userHomepage')  # Redirect to a desired page after login
#             except create_user.DoesNotExist:
#                 messages.error(request, 'Invalid username or password')
#     else:
#         form = LoginForm()
    
#     return render(request, 'viewerLoginpage.html', {'form': form,'sideBar': sideData})

from django.contrib.auth.hashers import make_password, check_password
from django.contrib import messages
from django.shortcuts import render, redirect
from .models import create_user
from .forms import LoginForm

def login(request):
    sideData = sideBar()
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['usernames']
            password = form.cleaned_data['password']
            
            try:
                # Retrieve the user by username
                user = create_user.objects.get(usernames=username)
                
                # Check if the entered password matches the stored hashed password
                if check_password(password, user.password):
                    # Set session or other login actions
                    request.session['user_id'] = user.id  # Example session setting
                    request.session['logged_in'] = True
                    request.session['username'] = username
                    messages.success(request, 'Login successful')
                    return redirect('userHomepage')  # Redirect to a desired page after login
                else:
                    messages.error(request, 'Invalid username or password')
            except create_user.DoesNotExist:
                messages.error(request, 'Invalid username or password')
    else:
        form = LoginForm()
    
    return render(request, 'viewerLoginpage.html', {'form': form, 'sideBar': sideData})



# View for registration page
from django.shortcuts import render, redirect
from django.contrib import messages
from .models import create_user
from .forms import viewerRegistrationForm

# def register(request):
#     sideData = sideBar()
#     if request.method == 'POST':
#         form = viewerRegistrationForm(request.POST)
#         if form.is_valid():
#             username = form.cleaned_data['usernames']
#             password = form.cleaned_data['password']
#             dob = form.cleaned_data['DOB']
#             address = form.cleaned_data['address']
            
#             # Check if the username already exists
#             if create_user.objects.filter(usernames=username).exists():
#                 messages.error(request, 'Username already exists. Please choose another one.')
#                 return render(request, 'viewerRegistrationpage.html', {"form": form})

#             # Create new user
#             create_user.objects.create(
#                 usernames=username,
#                 password=password,
#                 DOB=dob,
#                 address=address
#             )
#             return redirect('registration_success')
#         form = viewerRegistrationForm()

#     else:
#         form = viewerRegistrationForm()
    
#     return render(request, 'viewerRegistrationpage.html', {"form": form,"sideBar":sideData})
from django.contrib.auth.hashers import make_password
def register(request):
    sideData = sideBar()  # Assuming this function retrieves sidebar data
    form = viewerRegistrationForm()

    if request.method == 'POST':
        form = viewerRegistrationForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['usernames']
            password = form.cleaned_data['password']
            dob = form.cleaned_data['DOB']
            address = form.cleaned_data['address']
            
            # Check if the username already exists
            if create_user.objects.filter(usernames=username).exists():
                messages.error(request, 'Username already exists. Please choose another one.')
                return render(request, 'viewerRegistrationpage.html', {"form": form, "sideBar": sideData})

            hashed_password = make_password(password)

            # Create new user
            create_user.objects.create(
                usernames=username,
                password=hashed_password,
                DOB=dob,
                address=address
            )
            messages.success(request, 'Registration successful! You can now log in.')
            return redirect('login')

    return render(request, 'viewerRegistrationpage.html', {"form": form, "sideBar": sideData})

def registration_success(request):
    return render(request, 'registration_success.html')



def forgot_password(request):
    sideData = sideBar()
    
    if request.method == 'POST':
        form = PasswordResetForm(request.POST)
        
        if form.is_valid():
            username = form.cleaned_data.get('usernames')
            new_password = form.cleaned_data.get('new_password')

            try:
                # Fetch user by the provided username
                user = create_user.objects.get(usernames=username)
                
                if new_password:
                    # Set the new password and save it
                    user.password=make_password(new_password)
                    user.save()
                    messages.success(request, 'Password change successful')
                    return redirect('password_change_sucessful')  # Redirect after successful password reset
                
                # If only the username is provided (initial step)
                return redirect('forgot_password')
            
            except create_user.DoesNotExist:
                messages.error(request, 'User not found')

    else:
        form = PasswordResetForm()

    return render(request, 'forgot_password.html', {'form': form, 'sideBar': sideData})


# def forgot_password(request):
#     sideData = sideBar()
#     # if request.method == 'POST':
#     #     form = LoginForm(request.POST)
#     #     if form.is_valid():
#     #         username = form.cleaned_data['usernames']
           
#     #         try:
#     #             user = create_user.objects.get(usernames=username)
#     #             return redirect('forgot_password_assign_new_password')
#     #         except create_user.DoesNotExist:
#     #             messages.error(request, 'Invalid username or password')
#     # else:
#     form = PasswordResetForm()
    
#     return render(request, 'forgot_password_assign_new_password.html', {'form': form,'sideBar': sideData})

# def forgot_password_assign_new_password(request):
#     sideData = sideBar()
#     if request.method == 'POST':
#         form = PasswordResetForm(request.POST)
#         if form.is_valid():
#             new_password = form.cleaned_data['new_password']
#             try:
#                 user = create_user.objects.get(usernames=form.cleaned_data['usernames'])
#                 user.password= new_password  # Use set_password to hash the new password
#                 user.save()
#                 messages.success(request, 'Password change successful')
#                 return redirect('password_change_sucessful')  # Redirect to homepage after successful password reset
#             except create_user.DoesNotExist:
#                 messages.error(request, 'User not found')
#     else:
#         form = PasswordResetForm()
    
#     return render(request, 'forgot_password_assign_new_password.html', {'form': form, 'sideBar': sideData})

def password_change_successful(request):
    sideData = sideBar()
    return render(request, 'password_change_sucessful.html', {'sideBar': sideData})

# View for displaying items with filtering
def get_items(nth, search):
    # Load the data from CSV and images folder
    df1, df_filenames = load_data(STYLES_CSV_PATH, IMAGE_FOLDER_PATH)
    refined_data = merge_and_clean_data(df1, df_filenames)
    
    # Create the universal tag for vectorization
    universal_tag = create_universal_tag(refined_data)
    new_refined_data = prepare_dataset(refined_data, universal_tag)

    # Apply search query (if provided)
    keyword = search if search else ""

    # Vectorize the tags and find similar items
    cv = CountVectorizer(max_features=5000, stop_words="english")
    vector = cv.fit_transform(new_refined_data["allCategory"]).toarray()

    similar_items = find_similar_items_viewerItem(keyword, new_refined_data, cv, vector,nth)
    
    # Limit the number of items to the value of 'nth'
    limited_items = similar_items[:nth].to_dict(orient="records")  # Convert to a list of dictionaries
    
    return limited_items



# View for the image slider
def get_slider_images(nth):
    """Helper function to retrieve images for the slider."""
    image_files = os.listdir(IMAGE_FOLDER_PATH)
    image_files.sort()  # Ensure consistent order
    
    # Optionally filter only image files
    allowed_extensions = ['jpg', 'jpeg', 'png', 'gif']
    images = [image for image in image_files if image.split('.')[-1].lower() in allowed_extensions]

    return images[:nth]

# View for the slider page (if needed separately)
def slider_view(request):
    images = get_slider_images()
    return render(request, 'slider.html', {'images': images,"searchForm":searchForm()})
